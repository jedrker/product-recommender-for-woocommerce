#!/usr/bin/env python3
"""Command-line interface for the Medical Recommender system.

This script provides an interactive CLI for testing the recommendation system
and exploring its capabilities.
"""

import argparse
import json
import logging
import sys
from pathlib import Path

from core.recommender import MedicalRecommender
from utils.config import Config


def setup_logging(verbose: bool = False) -> None:
    """Configure logging for the application.
    
    Args:
        verbose: Enable debug-level logging
    """
    level = logging.DEBUG if verbose else logging.INFO
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )


def print_banner() -> None:
    """Print application banner."""
    print("=" * 60)
    print("üè• Medical Product Recommender for WooCommerce")
    print("=" * 60)
    print()


def print_recommendation(recommendation, show_json: bool = False) -> None:
    """Print recommendation results in a formatted way.
    
    Args:
        recommendation: Recommendation object to display
        show_json: Whether to show JSON format instead of formatted output
    """
    if show_json:
        print(json.dumps(recommendation.to_dict(), indent=2, ensure_ascii=False))
        return
    
    print(f"\nüîç Zapytanie: '{recommendation.query}'")
    print(f"üéØ Pewno≈õƒá: {recommendation.confidence:.1%}")
    print(f"üí° Uzasadnienie: {recommendation.reasoning}")
    print(f"\nüì¶ Rekomendowane produkty ({len(recommendation.products)}):")
    print("-" * 50)
    
    for i, product in enumerate(recommendation.products, 1):
        print(f"{i:2d}. {product.name}")
        print(f"    Kategoria: {product.category}")
        print(f"    Cena: {product.price:.2f} PLN")
        print(f"    Opis: {product.description}")
        print()


def interactive_mode(recommender: MedicalRecommender) -> None:
    """Run interactive CLI mode.
    
    Args:
        recommender: Initialized recommender instance
    """
    print("üöÄ Tryb interaktywny - wpisz zapytanie lub 'quit' aby wyj≈õƒá")
    print("üìù Przyk≈Çady: 'ratownik medyczny', 'cukrzyca', 'lekarz', 'pierwsza pomoc'")
    print()
    
    while True:
        try:
            query = input("‚ùì Twoje zapytanie: ").strip()
            
            if not query:
                continue
                
            if query.lower() in ['quit', 'exit', 'q']:
                print("üëã Do widzenia!")
                break
            
            if query.lower() == 'help':
                print_help_commands()
                continue
            
            if query.lower() == 'stats':
                print_stats(recommender)
                continue
            
            if query.lower() == 'categories':
                print_categories(recommender)
                continue
            
            if query.lower() == 'refresh':
                print_refresh_products(recommender)
                continue
            
            if query.lower() == 'cache':
                print_cache_info(recommender)
                continue
            
            if query.lower() == 'woo':
                print_woocommerce_info(recommender)
                continue
            
            if query.lower() == 'total':
                print_total_products(recommender)
                continue
            
            # Generate recommendation
            recommendation = recommender.recommend(query)
            print_recommendation(recommendation)
            
        except KeyboardInterrupt:
            print("\nüëã Do widzenia!")
            break
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd: {e}")


def print_help_commands() -> None:
    """Print available commands."""
    print("\nüìö Dostƒôpne komendy:")
    print("  help       - Poka≈º tƒô pomoc")
    print("  stats      - Poka≈º statystyki systemu")
    print("  categories - Poka≈º dostƒôpne kategorie")
    print("  refresh    - Od≈õwie≈º produkty z WooCommerce")
    print("  cache      - Informacje o cache")
    print("  woo        - Informacje o WooCommerce")
    print("  total      - Sprawd≈∫ rzeczywistƒÖ liczbƒô produkt√≥w w WooCommerce")
    print("  quit/exit  - Wyjd≈∫ z programu")
    print()


def print_stats(recommender: MedicalRecommender) -> None:
    """Print system statistics.
    
    Args:
        recommender: Recommender instance
    """
    print(f"\nüìä Statystyki systemu:")
    print(f"  Produkty: {recommender.get_products_count()}")
    print(f"  Kategorie: {len(recommender.get_categories())}")
    print(f"  Regu≈Çy: {len(recommender.rules)}")
    
    # WooCommerce info
    if recommender.woo_client:
        print(f"  WooCommerce: ‚úÖ Skonfigurowany")
        if recommender.test_woocommerce_connection():
            print(f"  Po≈ÇƒÖczenie: ‚úÖ Aktywne")
        else:
            print(f"  Po≈ÇƒÖczenie: ‚ùå B≈ÇƒÖd")
    else:
        print(f"  WooCommerce: ‚ùå Nie skonfigurowany")
    
    print()


def print_categories(recommender: MedicalRecommender) -> None:
    """Print available categories.
    
    Args:
        recommender: Recommender instance
    """
    categories = recommender.get_categories()
    print(f"\nüìÇ Dostƒôpne kategorie ({len(categories)}):")
    for category in sorted(categories):
        count = len(recommender._products_by_category[category])
        print(f"  ‚Ä¢ {category} ({count} produkt√≥w)")
    print()


def print_refresh_products(recommender: MedicalRecommender) -> None:
    """Refresh products from WooCommerce.
    
    Args:
        recommender: Recommender instance
    """
    if not recommender.woo_client:
        print("‚ùå WooCommerce nie jest skonfigurowany")
        return
    
    print("üîÑ Od≈õwie≈ºanie produkt√≥w z WooCommerce...")
    if recommender.refresh_products():
        print(f"‚úÖ Od≈õwie≈ºono {recommender.get_products_count()} produkt√≥w")
    else:
        print("‚ùå B≈ÇƒÖd podczas od≈õwie≈ºania produkt√≥w")
    print()


def print_cache_info(recommender: MedicalRecommender) -> None:
    """Print cache information.
    
    Args:
        recommender: Recommender instance
    """
    cache_info = recommender.get_cache_info()
    
    if cache_info:
        print(f"\nüíæ Informacje o cache:")
        print(f"  Produkty: {cache_info['product_count']}")
        print(f"  Wiek: {cache_info['age_human']}")
        print(f"  Wa≈ºno≈õƒá: {'‚úÖ Wa≈ºny' if cache_info['is_valid'] else '‚ùå Wygas≈Ç'}")
        print(f"  Czas cache: {cache_info['cache_duration']}s")
    else:
        print(f"\nüíæ Cache: Brak danych")
    print()


def print_woocommerce_info(recommender: MedicalRecommender) -> None:
    """Print WooCommerce information.
    
    Args:
        recommender: Recommender instance
    """
    if not recommender.woo_client:
        print("‚ùå WooCommerce nie jest skonfigurowany")
        return
    
    print(f"\nüõí Informacje o WooCommerce:")
    
    # Test connection
    if recommender.test_woocommerce_connection():
        print(f"  Po≈ÇƒÖczenie: ‚úÖ Aktywne")
    else:
        print(f"  Po≈ÇƒÖczenie: ‚ùå B≈ÇƒÖd")
    
    # Store info
    store_info = recommender.get_woocommerce_store_info()
    if store_info:
        print(f"  Sklep: {store_info.get('name', 'Nieznany')}")
        print(f"  URL: {store_info.get('url', 'Nieznany')}")
        print(f"  Wersja: {store_info.get('version', 'Nieznana')}")
    else:
        print(f"  Sklep: Nie mo≈ºna pobraƒá informacji")
    
    print()


def print_total_products(recommender: MedicalRecommender) -> None:
    """Print total number of products in WooCommerce store.
    
    Args:
        recommender: Recommender instance
    """
    if not recommender.woo_client:
        print("‚ùå WooCommerce nie jest skonfigurowany")
        return
    
    print("üîç Sprawdzanie rzeczywistej liczby produkt√≥w w WooCommerce...")
    
    try:
        total = recommender.get_woocommerce_total_products()
        if total is not None:
            current_limit = recommender.config.max_products if recommender.config else "nieznany"
            print(f"\nüìä Rzeczywista liczba produkt√≥w w WooCommerce:")
            print(f"  Wszystkich produkt√≥w: {total:,}")
            print(f"  Aktualny limit MAX_PRODUCTS: {current_limit}")
            if isinstance(current_limit, int) and total > current_limit:
                print(f"  ‚ö†Ô∏è  W sklepie jest {total - current_limit:,} wiƒôcej produkt√≥w ni≈º aktualny limit!")
            print()
        else:
            print("‚ùå Nie uda≈Ço siƒô pobraƒá informacji o liczbie produkt√≥w")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas sprawdzania liczby produkt√≥w: {e}")


def single_query_mode(recommender: MedicalRecommender, query: str, 
                     json_output: bool = False) -> None:
    """Process single query and exit.
    
    Args:
        recommender: Initialized recommender instance
        query: Query to process
        json_output: Output in JSON format
    """
    try:
        recommendation = recommender.recommend(query)
        print_recommendation(recommendation, show_json=json_output)
    except Exception as e:
        if json_output:
            error_response = {"error": str(e), "query": query}
            print(json.dumps(error_response, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå B≈ÇƒÖd: {e}")
        sys.exit(1)


def main() -> None:
    """Main application entry point."""
    parser = argparse.ArgumentParser(
        description="Medical Product Recommender - System rekomendacji produkt√≥w medycznych",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Przyk≈Çady u≈ºycia:
  %(prog)s                           # Tryb interaktywny
  %(prog)s --query "ratownik"        # Pojedyncze zapytanie
  %(prog)s --query "cukrzyca" --json # Wynik w formacie JSON
  %(prog)s --products custom.csv     # W≈Çasny plik z produktami
  %(prog)s --env .env                # W≈Çasny plik konfiguracyjny
        """
    )
    
    parser.add_argument(
        "--query", "-q",
        help="Pojedyncze zapytanie do przetworzenia"
    )
    
    parser.add_argument(
        "--products", "-p",
        help="≈öcie≈ºka do pliku CSV z produktami (domy≈õlnie: data/products.csv)"
    )
    
    parser.add_argument(
        "--env", "-e",
        help="≈öcie≈ºka do pliku .env z konfiguracjƒÖ WooCommerce"
    )
    
    parser.add_argument(
        "--json", "-j",
        action="store_true",
        help="Wy≈õwietl wyniki w formacie JSON"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="W≈ÇƒÖcz szczeg√≥≈Çowe logowanie"
    )
    
    parser.add_argument(
        "--refresh",
        action="store_true",
        help="Wymu≈õ od≈õwie≈ºenie produkt√≥w z WooCommerce"
    )
    
    args = parser.parse_args()
    
    # Setup logging
    setup_logging(args.verbose)
    
    # Load configuration
    config = None
    if args.env:
        try:
            config = Config(args.env)
            config.validate()
            logging.info(f"Loaded configuration from {args.env}")
        except Exception as e:
            logging.error(f"Failed to load configuration: {e}")
            sys.exit(1)
    else:
        try:
            config = Config()
            if config.is_woocommerce_configured():
                logging.info("WooCommerce configuration found")
            else:
                logging.info("No WooCommerce configuration, using local data only")
        except Exception as e:
            logging.warning(f"Configuration error: {e}")
            config = None
    
    # Print banner for interactive mode
    if not args.query:
        print_banner()
    
    try:
        # Initialize recommender
        recommender = MedicalRecommender(args.products, config)
        
        # Force refresh if requested
        if args.refresh and config and config.is_woocommerce_configured():
            print("üîÑ Wymuszanie od≈õwie≈ºenia produkt√≥w z WooCommerce...")
            if recommender.refresh_products():
                print(f"‚úÖ Od≈õwie≈ºono {recommender.get_products_count()} produkt√≥w")
            else:
                print("‚ùå B≈ÇƒÖd podczas od≈õwie≈ºania")
                sys.exit(1)
        
        if args.query:
            # Single query mode
            single_query_mode(recommender, args.query, args.json)
        else:
            # Interactive mode
            interactive_mode(recommender)
            
    except FileNotFoundError as e:
        print(f"‚ùå B≈ÇƒÖd: {e}")
        print("üí° Sprawd≈∫ czy plik z produktami istnieje lub u≈ºyj --products")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 